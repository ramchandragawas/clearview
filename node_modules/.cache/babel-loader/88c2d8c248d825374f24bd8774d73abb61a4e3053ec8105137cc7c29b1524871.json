{"ast":null,"code":"var _jsxFileName = \"D:\\\\clearview website\\\\new\\\\clearview\\\\src\\\\context\\\\ThemeContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext();\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s();\n  // Check local storage or use system preference as default\n  const getInitialTheme = () => {\n    const savedTheme = localStorage.getItem('theme');\n    if (savedTheme) {\n      return savedTheme;\n    }\n\n    // Check system preference\n    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\n  };\n  const [theme, setTheme] = useState('light'); // Default to light initially for SSR\n\n  // Set theme on client-side after mount\n  useEffect(() => {\n    setTheme(getInitialTheme());\n  }, []);\n\n  // Update the DOM when theme changes\n  useEffect(() => {\n    const root = window.document.documentElement;\n\n    // Remove previous theme\n    root.classList.remove('dark', 'light');\n\n    // Add new theme\n    root.classList.add(theme);\n\n    // Save to localStorage\n    localStorage.setItem('theme', theme);\n  }, [theme]);\n\n  // Toggle theme function\n  const toggleTheme = () => {\n    setTheme(prevTheme => prevTheme === 'light' ? 'dark' : 'light');\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      theme,\n      toggleTheme\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook for using the theme context\n_s(ThemeProvider, \"l0NnHMBAjTNA2m05PT0LPL3eOKc=\");\n_c = ThemeProvider;\nexport const useTheme = () => {\n  _s2();\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n_s2(useTheme, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","jsxDEV","_jsxDEV","ThemeContext","ThemeProvider","children","_s","getInitialTheme","savedTheme","localStorage","getItem","window","matchMedia","matches","theme","setTheme","root","document","documentElement","classList","remove","add","setItem","toggleTheme","prevTheme","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTheme","_s2","context","undefined","Error","$RefreshReg$"],"sources":["D:/clearview website/new/clearview/src/context/ThemeContext.jsx"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\r\n\r\nconst ThemeContext = createContext();\r\n\r\nexport const ThemeProvider = ({ children }) => {\r\n  // Check local storage or use system preference as default\r\n  const getInitialTheme = () => {\r\n    const savedTheme = localStorage.getItem('theme');\r\n    if (savedTheme) {\r\n      return savedTheme;\r\n    }\r\n    \r\n    // Check system preference\r\n    return window.matchMedia('(prefers-color-scheme: dark)').matches \r\n      ? 'dark' \r\n      : 'light';\r\n  };\r\n\r\n  const [theme, setTheme] = useState('light'); // Default to light initially for SSR\r\n  \r\n  // Set theme on client-side after mount\r\n  useEffect(() => {\r\n    setTheme(getInitialTheme());\r\n  }, []);\r\n\r\n  // Update the DOM when theme changes\r\n  useEffect(() => {\r\n    const root = window.document.documentElement;\r\n    \r\n    // Remove previous theme\r\n    root.classList.remove('dark', 'light');\r\n    \r\n    // Add new theme\r\n    root.classList.add(theme);\r\n    \r\n    // Save to localStorage\r\n    localStorage.setItem('theme', theme);\r\n  }, [theme]);\r\n\r\n  // Toggle theme function\r\n  const toggleTheme = () => {\r\n    setTheme(prevTheme => prevTheme === 'light' ? 'dark' : 'light');\r\n  };\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook for using the theme context\r\nexport const useTheme = () => {\r\n  const context = useContext(ThemeContext);\r\n  if (context === undefined) {\r\n    throw new Error('useTheme must be used within a ThemeProvider');\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,UAAU,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,MAAMC,YAAY,gBAAGN,aAAa,CAAC,CAAC;AAEpC,OAAO,MAAMO,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC7C;EACA,MAAMC,eAAe,GAAGA,CAAA,KAAM;IAC5B,MAAMC,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAChD,IAAIF,UAAU,EAAE;MACd,OAAOA,UAAU;IACnB;;IAEA;IACA,OAAOG,MAAM,CAACC,UAAU,CAAC,8BAA8B,CAAC,CAACC,OAAO,GAC5D,MAAM,GACN,OAAO;EACb,CAAC;EAED,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGjB,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;;EAE7C;EACAC,SAAS,CAAC,MAAM;IACdgB,QAAQ,CAACR,eAAe,CAAC,CAAC,CAAC;EAC7B,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAR,SAAS,CAAC,MAAM;IACd,MAAMiB,IAAI,GAAGL,MAAM,CAACM,QAAQ,CAACC,eAAe;;IAE5C;IACAF,IAAI,CAACG,SAAS,CAACC,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC;;IAEtC;IACAJ,IAAI,CAACG,SAAS,CAACE,GAAG,CAACP,KAAK,CAAC;;IAEzB;IACAL,YAAY,CAACa,OAAO,CAAC,OAAO,EAAER,KAAK,CAAC;EACtC,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;;EAEX;EACA,MAAMS,WAAW,GAAGA,CAAA,KAAM;IACxBR,QAAQ,CAACS,SAAS,IAAIA,SAAS,KAAK,OAAO,GAAG,MAAM,GAAG,OAAO,CAAC;EACjE,CAAC;EAED,oBACEtB,OAAA,CAACC,YAAY,CAACsB,QAAQ;IAACC,KAAK,EAAE;MAAEZ,KAAK;MAAES;IAAY,CAAE;IAAAlB,QAAA,EAClDA;EAAQ;IAAAsB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;;AAED;AAAAxB,EAAA,CA/CaF,aAAa;AAAA2B,EAAA,GAAb3B,aAAa;AAgD1B,OAAO,MAAM4B,QAAQ,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC5B,MAAMC,OAAO,GAAGlC,UAAU,CAACG,YAAY,CAAC;EACxC,IAAI+B,OAAO,KAAKC,SAAS,EAAE;IACzB,MAAM,IAAIC,KAAK,CAAC,8CAA8C,CAAC;EACjE;EACA,OAAOF,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,QAAQ;AAAA,IAAAD,EAAA;AAAAM,YAAA,CAAAN,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}